from pathlib import Path
import archinstall

from archinstall import profile
from archinstall.default_profiles.minimal import MinimalProfile
from archinstall import disk
from archinstall import models
from archinstall import Installer, disk, debug, locale


custom_locale = locale.LocaleConfiguration("de-latin1", "en_US", "UTF-8")

fs_type = disk.FilesystemType('ext4')

for device in disk.device_handler.devices:
	print(f"{device.device_info.path} ({device.device_info.total_size.as_text()} {device.device_info.model})")

device_path = input("Enter device name from above: ")

device = disk.device_handler.get_device(Path(device_path))
if not device:
	raise ValueError('No device found for given path')

device_modification = disk.DeviceModification(device, wipe=True)

# create a new boot partition
boot_partition = disk.PartitionModification(
	status=disk.ModificationStatus.Create,
	type=disk.PartitionType.Primary,
	start=disk.Size(1, disk.Unit.MiB, device.device_info.sector_size),
	length=disk.Size(512, disk.Unit.MiB, device.device_info.sector_size),
	mountpoint=Path('/boot'),
	fs_type=disk.FilesystemType.Fat32,
	flags=[disk.PartitionFlag.Boot]
)
device_modification.add_partition(boot_partition)

start_root = boot_partition.length
length_root = device.device_info.total_size - start_root
# create a new root partition
root_partition = disk.PartitionModification(
	status=disk.ModificationStatus.Create,
	type=disk.PartitionType.Primary,
	start=start_root,
	length=length_root,
	mountpoint=Path('/'),
	fs_type=fs_type,
	mount_options=[]
)
device_modification.add_partition(root_partition)

disk_config = disk.DiskLayoutConfiguration(
	config_type=disk.DiskLayoutType.Default,
	device_modifications=[device_modification]
)

fs_handler = disk.FilesystemHandler(disk_config)
fs_handler.perform_filesystem_operations(show_countdown=False)

mountpoint = Path('/tmp')

with Installer(
	mountpoint,
	disk_config,
	kernels=['linux']
) as installation:
	installation.mount_ordered_layout()
	installation.minimal_installation(hostname='pentest-arch', multilib=True, locale_config=custom_locale)
	installation.set_timezone("Europe/Vienna")
	installation.copy_iso_network_config(enable_services=True)
	installation.add_additional_packages(['vim', 'curl', 'git', 'xorg', 'lightdm','lightdm-gtk-greeter', 'cinnamon', 'alacritty'])
	installation.enable_service('lightdm')
	installation.activate_time_synchronization()
	installation.add_bootloader(models.Bootloader.Grub)

	user = models.User('hacker', 'changeme', True)
	installation.create_users(user)

	print("Installing BlackArch base packages")
	print(installation.arch_chroot("curl --create-dirs --output-dir /opt/blackarch/ -O https://blackarch.org/strap.sh"))
	print(installation.arch_chroot("chmod +x /opt/blackarch/strap.sh"))
	print(installation.arch_chroot("/opt/blackarch/strap.sh"))
	print(installation.arch_chroot("pacman -S blackarch-recon --noconfirm"))
	print("Custom stuff finished :)")
