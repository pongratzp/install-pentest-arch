from pathlib import Path
import shlex
from typing import Any, List, Optional, TYPE_CHECKING, Union, Dict, Callable
from archinstall import SysCommand

from archinstall import Installer, disk, locale, models


# I needed to "override" this in order to get live chroot command output
def run_command(installation, cmd: str, *args: str, **kwargs: str) -> SysCommand:
    return SysCommand(
        f"/usr/bin/arch-chroot {installation.target} {cmd}", peek_output=True
    )


def arch_chroot_peek(installation, cmd: str, run_as: Optional[str] = None) -> SysCommand:
    if run_as:
        cmd = f"su - {run_as} -c {shlex.quote(cmd)}"

    return run_command(installation, cmd)


custom_locale = locale.LocaleConfiguration("de-latin1", "en_US", "UTF-8")

fs_type = disk.FilesystemType("ext4")

for device in disk.device_handler.devices:
    print(
        f"{device.device_info.path} ({device.device_info.total_size.as_text()} {device.device_info.model})"
    )

device_path = input("Enter device name from above: ")

device = disk.device_handler.get_device(Path(device_path))
if not device:
    raise ValueError("No device found for given path")

device_modification = disk.DeviceModification(device, wipe=True)

# create a new boot partition
boot_partition = disk.PartitionModification(
    status=disk.ModificationStatus.Create,
    type=disk.PartitionType.Primary,
    start=disk.Size(1, disk.Unit.MiB, device.device_info.sector_size),
    length=disk.Size(512, disk.Unit.MiB, device.device_info.sector_size),
    mountpoint=Path("/boot"),
    fs_type=disk.FilesystemType.Fat32,
    flags=[disk.PartitionFlag.Boot],
)
device_modification.add_partition(boot_partition)

start_root = boot_partition.length
length_root = device.device_info.total_size - start_root
# create a new root partition
root_partition = disk.PartitionModification(
    status=disk.ModificationStatus.Create,
    type=disk.PartitionType.Primary,
    start=start_root,
    length=length_root,
    mountpoint=Path("/"),
    fs_type=fs_type,
    mount_options=[],
)
device_modification.add_partition(root_partition)

disk_config = disk.DiskLayoutConfiguration(
    config_type=disk.DiskLayoutType.Default, device_modifications=[device_modification]
)

fs_handler = disk.FilesystemHandler(disk_config)
fs_handler.perform_filesystem_operations(show_countdown=False)

mountpoint = Path("/tmp")

with Installer(mountpoint, disk_config, kernels=["linux"]) as installation:
    installation.mount_ordered_layout()
    installation.minimal_installation(
        hostname="pentest-arch", multilib=True, locale_config=custom_locale
    )
    installation.set_timezone("Europe/Vienna")
    installation.add_additional_packages(
        [
            "vim",
            "curl",
            "git",
            "xorg",
            "lightdm",
            "lightdm-gtk-greeter",
            "cinnamon",
            "alacritty",
        ]
    )
    installation.enable_service("lightdm")
    installation.enable_service("NetworkManager")
    installation.activate_time_synchronization()
    installation.add_bootloader(models.Bootloader.Grub)

    user = models.User("hacker", "changeme", True)
    installation.create_users(user)

    print("Installing BlackArch base packages")

    arch_chroot_peek(
        installation,
        "curl --create-dirs --output-dir /opt/blackarch/ -O https://blackarch.org/strap.sh",
    )
    arch_chroot_peek(installation, "chmod +x /opt/blackarch/strap.sh")
    arch_chroot_peek(installation, "/opt/blackarch/strap.sh")
    arch_chroot_peek(installation, "pacman -S adidnsdump --noconfirm")
    print("Custom stuff finished :)")
